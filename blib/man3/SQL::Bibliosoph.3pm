.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Bibliosoph 3"
.TH SQL::Bibliosoph 3 "2009-02-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Bibliosoph \- A SQL Statements Library
.SH "VERSION"
.IX Header "VERSION"
1.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use SQL::Bibliosoph;
\&
\&
\&    # To enable DEBUG, set:
\&    # $SQL::Biblosoph::DEBUG=1;
\&
\&        my $bs = SQL::Biblioshoph\->new(
\&                        dsn              => $database_handle,
\&                        catalog  => [ qw(users products <billing) ],
\&    #       benchmark=> 1, # to enable statement benchmarking and debug
\&        );
\&
\&
\&    # To disable all debug output. 
\&    # $SQL::Biblosoph::QUIT=1;
\&
\&        # Using dynamic generated functions.  Wrapper funtions 
\&        # are automaticaly created on module initialization.
\&        # Query should something like:
\&
\&        # \-\-[ get_products ]
\&        #  SELECT id,name FROM  product WHERE country = ?
\&        
\&        my $products_ref = $bs\->get_products($country);
\&
\&        # Forcing numbers in parameters
\&        # Query:
\&
\&        # \-\-[ get_products ]
\&        #  SELECT id,name FROM  product WHERE country = ? LIMIT #?,#?
\&
\&        
\&        # Parameter ordering and repeating
\&        # Query:
\&        
\&        # \-\-[ get_products ]
\&        #  SELECT id,name 
\&        #               FROM  product 
\&        #               WHERE 1? IS NULL OR country = 1? 
\&        #                AND  price > 2? * 0.9 AND print > 2? * 1.1
\&        #               LIMIT #3?,#4?
\&        
\&        my $products_ref = $bs\->get_products($country,$price,$start,$limit);
\&
\&        # The same, but with an array of hashs result (add h_ at the begining)
\&
\&        my $products_array_of_hash_ref = $bs\->h_get_products($country,$price,$start,$limit);
\&        
\&
\&        # Selecting only one row (add row_ at the begining)
\&        # Query:
\&        
\&        # \-\-[ get_one ]
\&        #  SELECT name,age FROM  person where id = ?;
\&        
\&        my $product_ref = $bs\->row_get_one($product_id);
\&        
\&        # Selecting only one value (same query as above)
\&        my $product_name = $bs\->row_get_one($product_id)\->[1];
\&
\&
\&        # Selecting only one row, but with HASH ref results (same query as above)
\&                                    (add rowh_ at the begining)
\&        my $product_hash_ref = $bs\->rowh_get_one($product_id);
\&        
\&
\&        # Inserting a row, with an auto_increment PK.
\&        # Query:
\&        
\&        # \-\-[ insert_person ]
\&        #  INSERT INTO person (name,age) VALUES (?,?);
\&        
\&        my $last_insert_id = $bs\->insert_person($name,$age);
\&
\&
\&        # Updating some rows
\&        # Query:
\&        
\&        # \-\-[ age_persons ]
\&        #  UPDATE person SET age = age + 1 WHERE birthday = ?
\&        
\&        my $updated_persons = $bs\->age_persons($today);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Bibliosoph is a \s-1SQL\s0 statement library engine that allow to clearly separate \s-1SQL\s0 statements from \s-1PERL\s0 code. It is currently tested on MySQL 5.x, but it should be easly ported to other engines.
.PP
The catalog files are prepared a the initialization, for performance reasons. The use of prepared statement also helps to prevents \s-1SQL\s0 injection attacks.  SQL::Bibliosoph supports bind parameters in statements definition and bind parements reordering. (\s-1SEE\s0 SQL::Bibliosoph::CatalogFile for details).
.PP
All functions throw 'carp' on error. The error message is '\s-1SQL\s0 \s-1ERROR\s0' and the mysql error reported by the driver.
.SH "Constructor parameters"
.IX Header "Constructor parameters"
\fIdsn\fR
.IX Subsection "dsn"
.PP
The database handler. For example:
.PP
.Vb 2
\&        my $dbh = DBI\->connect($dsn, ...);
\&        my $bb = SQL::Bibliosoph(dsn=>$dsn, ...);
.Ve
.PP
\fIcatalog\fR
.IX Subsection "catalog"
.PP
An array ref containg filenames with the queries. This files should use de SQL::Bibliosoft::CatalogFile format (\s-1SEE\s0 Perldoc for details). The suggested extension for these files is 'bb'. The name can be preceded with a \*(L"<\*(R" forcing the catalog the be open in \*(L"read-only\*(R" mode. In the mode, \s-1UPDATE\s0, \s-1INSERT\s0 and \s-1REPLACE\s0 statement will be parsed. Note the calling a \s-1SQL\s0 procedure or function that actually modifies the \s-1DB\s0 is still allowed!
.PP
All the catalogs will be merged, be carefull with namespace collisions. the statement will be prepared at module constuction.
.PP
\fIcatalog_str\fR
.IX Subsection "catalog_str"
.PP
Allows to define a \s-1SQL\s0 catalog using a string (not a file). The queries will be merged with Catalog files (if any).
.PP
\fIconstants_from\fR
.IX Subsection "constants_from"
.PP
In order to use the same constants in your \s-1PERL\s0 code and your \s-1SQL\s0 modules, you can declare a module using `constants_from` paramenter. Constants exported in that module (using \f(CW@EXPORT\fR) will be replaced in all catalog file before \s-1SQL\s0 preparation.
.PP
\fIconstants_path\fR
.IX Subsection "constants_path"
.PP
Define the search path for `constants_from`  \s-1PERL\s0 modules.
.PP
\fIdelayed\fR
.IX Subsection "delayed"
.PP
Do not prepare all the statements at startup. They will be prepared individualy,  when they are used for the first time. Defaults to \fIfalse\fR\|(0).
.PP
\fIbenchmark\fR
.IX Subsection "benchmark"
.PP
Use this to enable Query profilling. The elapsed time (in miliseconds) will be printed
to \s-1STDERR\s0 after each query execution.
.SH "Bibliosoph"
.IX Header "Bibliosoph"
n. person having deep knowledge of books. bibliognostic.
.SH "AUTHORS"
.IX Header "AUTHORS"
SQL::Bibliosoph by Matias Alejo Garcia (matias at confronte.com) and Lucas Lain (lucas at confronte.com).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007 Matias Alejo Garcia. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SUPPORT / WARRANTY"
.IX Header "SUPPORT / WARRANTY"
The SQL::Bibliosoph is free Open Source software. \s-1IT\s0 \s-1COMES\s0 \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Bibliosoph::CatalogFile
.PP
At	http://nits.com.ar/bibliosoph you can find:
.PP
.Vb 3
\&        * Examples
\&        * VIM syntax highlighting definitions for bb files
\&        * CTAGS examples for indexing bb files.
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
To Confronte.com and its associates to support the development of this module.
.SH "BUGS"
.IX Header "BUGS"
This module is only tested with MySQL. Migration to other \s-1DB\s0 engines should be
simple accomplished. If you would like to use Bibliosoph with other \s-1DB\s0, please 
let me know and we can help you if you do the testing.
