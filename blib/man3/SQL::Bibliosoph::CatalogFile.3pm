.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Bibliosoph::CatalogFile 3"
.TH SQL::Bibliosoph::CatalogFile 3 "2009-02-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Bibliosoph::CatalogFile \- Bibliosoph SQL Statements Parser
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads a \s-1SQL\s0 library statements file, using the \s-1BB\s0 format (\s-1SEE\s0 below)
.SH "BB Format"
.IX Header "BB Format"
\&\-\-[ Query_name1 ] 
\&\s-1SQL\s0 statement
.PP
The query name must be a simple string, case sensitive, with no spaces. The file can have comment in every line, starting with #. Statements can include bind params denoted with question mark `?`. Optionally, parameters can be numbered: 1?, 2?, 3? ... This allows to reuse paraments, like in:
.PP
.Vb 3
\&                SELECT * 
\&                        FROM user
\&                         WHERE name = 1? OR nick = 1?
.Ve
.PP
The bind parameter number can be preceded by a `#`. This force the parameter to be strictly numeric. This is useful for using bind parameters with the \s-1LIMIT\s0 clause.
.PP
==head1 Examples
.IP "A simple query, using two bind parament" 4
.IX Item "A simple query, using two bind parament"
.Vb 9
\&        \-\-[ GET_T1 ]
\&        # A very nice commentA
\&                SELECT          t1.*
\&                FROM            table1 t1
\&        # A other comment
\&        LEFT JOIN   table2 t2
\&        ON                      t1.id = t2.t1_fk
\&        WHERE           t2.id = ? 
\&                LIMIT #?
.Ve
.IP "An insert statement. This returns the last inserted \s-1ID\s0." 4
.IX Item "An insert statement. This returns the last inserted ID."
.Vb 6
\&        \-\-[ INSERT_USER ]
\&        # This returns LAST_INSERT_ID if \`user\` has a auto_increment column
\&                INSERT 
\&                        INTO user (name,country) 
\&                        VALUES 
\&                        (?, IFNULL(?,\*(AqUS\*(Aq) )
.Ve
.IP "An update statement. Returns modifed rows." 4
.IX Item "An update statement. Returns modifed rows."
.Vb 5
\&        \-\-[ AGE_USERS ]
\&        # This returns the modified rows
\&                UPDATE user
\&                        SET age = age + 1
\&                        WHERE birthday = ?
.Ve
.IP "The select using numeric and ordered params" 4
.IX Item "The select using numeric and ordered params"
.Vb 8
\&        \-\-[ GET_USERS ]
\&        # Example using numeric and ordered params
\&                SELECT * 
\&                        FROM user 
\&                        WHERE 
\&                                (1? IS NULL OR country = 1? )
\&                                AND (2? IS NULL OR state =  2?)
\&                        LIMIT #3?,#4?
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
SQL::Bibliosoph by Matias Alejo Garcia (matias at confronte.com) and Lucas Lain (lucas at confronte.com).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007 Matias Alejo Garcia. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SUPPORT / WARRANTY"
.IX Header "SUPPORT / WARRANTY"
The SQL::Bibliosoph is free Open Source software. \s-1IT\s0 \s-1COMES\s0 \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&        SQL::Bibliosoph
\&        SQL::Bibliosoph::CatalogFile
.Ve
.PP
At	http://nits.com.ar/bibliosoph you can find:
	* Examples
	* \s-1VIM\s0 syntax highlighting definitions for bb files
	* \s-1CTAGS\s0 examples for indexing bb files.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
To Confronte.com and its associates to support the development of this module.
